<?php
	$postID = $_GET['post'];
	$rows = $wpdb->get_results( 
		"
			SELECT *
			FROM wp_term_taxonomy
			INNER JOIN wp_term_relationships ON wp_term_taxonomy.term_taxonomy_id = wp_term_relationships.term_taxonomy_id
			WHERE (object_id = $postID)
		"
	);
	$postIDtaxArray = array();
	foreach ($rows as $item) 
	{
		array_push($postIDtaxArray, $item->term_id);	
	}
// Custom Post Type Registration (Products)
add_action( 'init', 'create_products_postype' );
function create_products_postype() {
$labels = array(
    'name' => _x('Products', 'post type general name'),
    'singular_name' => _x('product', 'post type singular name'),
    'add_new' => __('Add New Product', 'Term'),
	'add_new_item' => __('Add New Product'),
	'edit_item' => __('Edit Product'),
    'view_item' => __('View Product'),
    'search_items' => __('Search Products Index'),
    'not_found' =>  __('No matching Product found'),
    'not_found_in_trash' => __('No Product found in Trash'),
    'parent_item_colon' => '',
);
$args = array(
    'label' => __('Products'),
    'labels' => $labels,
    'public' => true,
    'can_export' => true,
    'show_ui' => true,
    '_builtin' => false,
    '_edit_link' => 'post.php?post=%d', // ?
    'capability_type' => 'post',
    'menu_icon' => get_bloginfo('stylesheet_directory').'/assets/images/admin/icon_products.png',
    'hierarchical' => false,
    'rewrite' => array( "slug" => "products" ),
    'supports'=> array('title','editor','excerpt','author','revisions','thumbnail','custom-fields'),
    'show_in_nav_menus' => true,
    'taxonomies' => array( 'category'),
    'register_meta_box_cb' => 'mb_products_add_metaboxes'
);
register_post_type( 'sn-products', $args);
}
function create_category_taxonomy() {
$labels = array(
    'name' => _x( 'Categories', 'taxonomy general name' ),
    'singular_name' => _x( 'Category', 'taxonomy singular name' ),
    'search_items' =>  __( 'Search Categories' ),
    'popular_items' => __( 'Popular Categories' ),
    'all_items' => __( 'All Categories' ),
    'parent_item' => null,
    'parent_item_colon' => null,
    'edit_item' => __( 'Edit Category' ),
    'update_item' => __( 'Update Category' ),
    'add_new_item' => __( 'Add New Category' ),
    'new_item_name' => __( 'New Category Name' ),
    'separate_items_with_commas' => __( 'Separate categories with commas' ),
    'add_or_remove_items' => __( 'Add or remove categories' ),
    'choose_from_most_used' => __( 'Choose from the most used categories' ),
);

register_taxonomy('category','sn-products', array(
    'label' => __('Products Category'),
    'labels' => $labels,
    'hierarchical' => true,
    'show_ui' => true,
    'query_var' => true,
    'rewrite' => array( 'slug' => 'product-category' ),
));
}
add_action( 'init', 'create_category_taxonomy', 0 );

/* CUSTOM META BOXES - Products Details begins */
function mb_products_add_metaboxes()
{
	add_meta_box('mb_product_description', 'Description', 'mb_product_description', 'sn-products', 'normal', 'default');	
    add_meta_box('mb_product_ingredients', 'Ingredients', 'mb_product_ingredients', 'sn-products', 'normal', 'default');
	add_meta_box('mb_product_healthconcerns', 'Health Concerns', 'mb_product_healthconcerns', 'sn-products', 'normal', 'default');
    wp_enqueue_script('global-products', get_stylesheet_directory_uri().'/assets/js/admin/global_products.js', array('jquery'), '', TRUE);
    wp_enqueue_script('global-products-tinysort', get_stylesheet_directory_uri().'/assets/js/admin/jquery.tinysort.min.js', array('jquery'), '', TRUE);
    wp_enqueue_style('jquery-ui-css', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css');
    wp_enqueue_style('global-products-css', get_stylesheet_directory_uri().'/assets/css/admin/products.css');
}
function mb_product_ingredients($post)
{
    // Use nonce for verification
    wp_nonce_field(plugin_basename(__FILE__), 'productsmeta_noncename1');
    $ingredients = get_post_meta($post->ID, '_wp_editor_product_ingredients', false);
	echo '<div class="productEditor">';
    wp_editor($ingredients[0], '_wp_editor_product_ingredients');
	echo '</div>';
	echo '<div class="placeholder">';
	echo '<div class="format" id="priorityIngredients">';
	global $wpdb;
	$rows = $wpdb->get_results( 
		"
			SELECT name, slug, parent, wp_terms.term_id, taxonomy, count
			FROM wp_terms
			INNER JOIN wp_term_taxonomy ON wp_terms.term_id = wp_term_taxonomy.term_id
			WHERE (parent = 2247) AND (taxonomy = 'category')
			ORDER BY name
		"
	);
	global $postIDtaxArray;
	$count = 0;
	foreach ($rows as $item) 
	{
		echo '<input type="checkbox" class="priorityOne" name="'.$item->name.'" cat="'.$item->term_id.'" id="check'.$item->term_id.'" ';
		if (in_array($item->term_id, $postIDtaxArray)) {
			echo "checked='checked'";
			$count++;
		} else {
	};		
	echo '/><label for="check'.$item->term_id.'">'.$item->name.' ('.$item->count.')</label>';
	}
	echo '</div>';
	echo '<div class="prioritycount"><strong>'.$count.'</strong> SELECTED</div>';
	echo '<div class="priority" id="priorityIngredients_slider">';
	echo '</div>';
	echo '<input type="hidden" class="hiddenPriority" id="priorityIngredients_hidden" name="priorityIngredients_hidden" />';
	echo '</div>';
}
function mb_product_healthconcerns($post)
{
    // Use nonce for verification
    wp_nonce_field(plugin_basename(__FILE__), 'productsmeta_noncename2');
	$health = get_post_meta($post->ID, '_wp_editor_product_health', false);
	echo '<div class="productEditor">';
    wp_editor($health[0], '_wp_editor_product_health');
	echo '</div>';
	echo '<div class="placeholder">';
	echo '<div class="format" id="priorityHealth">';

	global $wpdb;
	$rows = $wpdb->get_results( 
		"
			SELECT name, slug, parent, wp_terms.term_id, taxonomy, count
			FROM wp_terms
			INNER JOIN wp_term_taxonomy ON wp_terms.term_id = wp_term_taxonomy.term_id
			WHERE (parent = 2248) AND (taxonomy = 'category')
			ORDER BY name
		"
	);
	
	global $postIDtaxArray;
	
	$count = 0;
	
	foreach ($rows as $item) 
	{
		echo '<input type="checkbox" class="priorityOne" name="'.$item->name.'" cat="'.$item->term_id.'" id="check'.$item->term_id.'" ';
		if (in_array($item->term_id, $postIDtaxArray)) {
			echo "checked='checked'";
			$count++;
		} else {
			//echo "checked='false'";
		};		
		echo '/><label for="check'.$item->term_id.'">'.$item->name.' ('.$item->count.')</label>';

	}
	echo '</div>';
	echo '<div class="prioritycount"><strong>'.$count.'</strong> SELECTED</div>';
	echo '<div class="priority" id="priorityHealth_slider">';
	echo '</div>';
	echo '<input type="hidden" class="hiddenPriority" id="priorityHealth_hidden" name="priorityHealth_hidden" />';
	echo '</div>';
}
function mb_product_description($post)
{
    // Use nonce for verification
    wp_nonce_field(plugin_basename(__FILE__), 'productsmeta_noncename3');
    $description = get_post_meta($post->ID, '_wp_editor_product_description', false);
	echo '<div class="productEditor">';
    wp_editor($description[0], '_wp_editor_product_description');
	echo '</div>';
	echo '<div class="placeholder">';
	echo '<div class="format" id="priorityType">';
	global $wpdb;
	$rows = $wpdb->get_results( 
		"
			SELECT name, slug, parent, wp_terms.term_id, taxonomy, count
			FROM wp_terms
			INNER JOIN wp_term_taxonomy ON wp_terms.term_id = wp_term_taxonomy.term_id
			WHERE (parent = 2249) AND (taxonomy = 'category')
			ORDER BY name
		"
	);
	global $postIDtaxArray;
	$count = 0;
	foreach ($rows as $item) 
	{
		echo '<input type="checkbox" class="priorityOne" name="'.$item->name.'" cat="'.$item->term_id.'" id="check'.$item->term_id.'" ';
		if (in_array($item->term_id, $postIDtaxArray)) {
			echo "checked='checked'";
			$count++;
		} else {
		};		
		echo '/><label for="check'.$item->term_id.'">'.$item->name.' ('.$item->count.')</label>';
	}
	echo '</div>';
	echo '<div class="prioritycount"><strong>'.$count.'</strong> SELECTED</div>';
	echo '<div class="priority" id="priorityType_slider">';
	echo '</div>';
	echo '<input type="hidden" class="hiddenPriority" id="priorityType_hidden" name="priorityType_hidden" />';
	echo '</div>';
}
function mb_product_priority_health($post)
{
    // Use nonce for verification
    wp_nonce_field(plugin_basename(__FILE__), 'productsmeta_noncename4');
}
function mb_product_priority_ingredients($post)
{
    // Use nonce for verification
    wp_nonce_field(plugin_basename(__FILE__), 'productsmeta_noncename5');
}
//add the css and js only on the pages where we need it
global $post_type, $hook_suffix;

if($post_type == 'sn-products'){
    add_action("admin_print_scripts-{$hook_suffix}", array(&$this, 'add_datepicker_scripts'));
}

function add_datepicker_scripts(){
}

// Save the Metabox Data
function mb_products_save_meta($post_id, $post)
{
	//echo $post_id;
	//$revisionPostID = 
	//var_dump(); exit();
	if (wp_is_post_revision($post_id)) {

		$revisionPostID = wp_is_post_revision($post);

	} else {
		
		$revisionPostID = wp_is_post_revision($post_id);	
		
	};

    // verify this came from the our screen and with proper authorization,
    // because save_post can be triggered at other times
    if (!wp_verify_nonce($_POST['productsmeta_noncename1'], plugin_basename(__FILE__))) {
        return $post->ID;
    }
    // Is the user allowed to edit the post or page?

    if (!current_user_can('edit_post', $post->ID))
        return $post->ID;
    	// OK, we're authenticated: we need to find and save the data
    	// We'll put it into an array to make it easier to loop though.
	
		//echo $post_id; exit();
        update_post_meta($revisionPostID, '_wp_editor_product_description', $_POST['_wp_editor_product_description']);	
        update_post_meta($revisionPostID, '_wp_editor_product_health', $_POST['_wp_editor_product_health']);
        update_post_meta($revisionPostID, '_wp_editor_product_ingredients', $_POST['_wp_editor_product_ingredients']);

		//RESETTING PRIORITY FIELDS
	global $wpdb;

	$rows = $wpdb->get_results( 
		"
			SELECT meta_key, meta_value
			FROM wp_postmeta
			WHERE post_id = $revisionPostID
		"
		
	);
	foreach ($rows as $item) 
	{
	
		if (is_numeric($item->meta_key)){
			
			delete_post_meta($revisionPostID, $item->meta_key);		
		};
	}
	wp_set_object_terms($post_id, NULL, 'category');
		$priorityCatArray = array();
		$priorityType_hidden = explode(",", $_POST['priorityType_hidden']);	
		foreach ($priorityType_hidden as $priorityItem) {
			$priorityItem = explode(":", $priorityItem);
        	update_post_meta($revisionPostID, $priorityItem[0], $priorityItem[1]);
			array_push($priorityCatArray, intval($priorityItem[0]));
		};
		$priorityHealth_hidden = explode(",", $_POST['priorityHealth_hidden']);	
		foreach ($priorityHealth_hidden as $priorityItem) {
			$priorityItem = explode(":", $priorityItem);
        	update_post_meta($revisionPostID, $priorityItem[0], $priorityItem[1]);		
			array_push($priorityCatArray, intval($priorityItem[0]));
		};
		$priorityIngredients_hidden = explode(",", $_POST['priorityIngredients_hidden']);	
		foreach ($priorityIngredients_hidden as $priorityItem) {
			$priorityItem = explode(":", $priorityItem);
        	update_post_meta($revisionPostID, $priorityItem[0], $priorityItem[1]);		
			array_push($priorityCatArray, intval($priorityItem[0]));
		};
		var_dump($priorityType_hidden);
		var_dump($priorityHealth_hidden);
		var_dump($priorityIngredients_hidden);
		//exit();
		$priorityCatArray = array_filter($priorityCatArray);
		var_dump($priorityCatArray);
		//wp_set_post_categories($post_id, $priorityCatArray);
		wp_set_object_terms($post_id, $priorityCatArray, 'category');
    // Add values of $product_meta as custom fields
    foreach ($products_meta as $key => $value) { // Cycle through the $product_meta array!
        if ($post->post_type == 'revision')
            return; // Don't store custom data twice
        $value = implode(',', (array) $value); // If $value is an array, make it a CSV (unlikely)
        if (get_post_meta($post->ID, $key, FALSE)) { // If the custom field already has a value
            update_post_meta($post->ID, $key, $value);
        } else { // If the custom field doesn't have a value
            add_post_meta($post->ID, $key, $value);
        }
        if (!$value)
            delete_post_meta($post->ID, $key); // Delete if blank
    }
}
add_action('save_post', 'mb_products_save_meta', 1, 2); // save the custom fields