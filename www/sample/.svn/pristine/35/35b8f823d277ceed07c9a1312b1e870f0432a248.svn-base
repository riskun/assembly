<?php
// 0. Base
add_action('admin_init', 'sn_functions_css');
function sn_functions_css() {
	wp_enqueue_style('sn-functions-css', get_bloginfo('template_directory') . '/assets/css/admin/events.css');

}

// 1. Custom Post Type Registration (Events)
add_action( 'init', 'create_event_postype' );
function create_event_postype() {

$labels = array(
    'name' => _x('Events', 'post type general name'),
    'singular_name' => _x('Event', 'post type singular name'),
    'add_new' => _x('Add New Event', 'events'),
    'add_new_item' => __('Add New Event'),
    'edit_item' => __('Edit Event'),
    'new_item' => __('New Event'),
    'view_item' => __('View Event'),
    'search_items' => __('Search Events'),
    'not_found' =>  __('No events found'),
    'not_found_in_trash' => __('No events found in Trash'),
    'parent_item_colon' => '',
);

$args = array(
    'label' => __('Events'),
    'labels' => $labels,
    'public' => true,
    'can_export' => true,
    'show_ui' => true,
    '_builtin' => false,
    '_edit_link' => 'post.php?post=%d', // ?
    'capability_type' => 'post',
    'menu_icon' => get_bloginfo('template_url').'/assets/images/admin/event_16.png',
    'hierarchical' => false,
	'menu_position' => 4,
    'rewrite' => array( "slug" => "events" ),
    'supports'=> array('title','editor') ,
    'show_in_nav_menus' => true
);

register_post_type( 'sn-events', $args);

}
// 3. Show Columns

add_filter ("manage_edit-sn_events_columns", "sn_events_edit_columns");
add_action ("manage_posts_custom_column", "sn_events_custom_columns");

function sn_events_edit_columns($columns) {

    $columns = array(
		"cb" => "<input type=\"checkbox\" />",
		"title" => "Name",
        "sn_col_ev_date" => "Dates",
        "sn_col_ev_times" => "Times",
        "sn_col_ev_location" => "Location",
        "sn_col_ev_desc" => "Description",
        );

    return $columns;

}

function sn_events_custom_columns($column) {

    global $post;
    $custom = get_post_custom();
    switch ($column)

        {
            case "sn_col_ev_date":
                // - show dates -
                $startd = $custom["sn_events_startdate"][0];
                $endd = $custom["sn_events_enddate"][0];
                $startdate = date("F j, Y", $startd);
                $enddate = date("F j, Y", $endd);
                echo $startdate . '<br /><em>' . $enddate . '</em>';
            break;
            case "sn_col_ev_times":
                // - show times -
                $startt = $custom["sn_events_startdate"][0];
                $endt = $custom["sn_events_enddate"][0];
                $time_format = get_option('time_format');
                $starttime = date($time_format, $startt);
                $endtime = date($time_format, $endt);
                echo $starttime . ' - ' .$endtime;
            break;
            case "sn_col_ev_location":
                // - show dates -
				$evloc = $custom["sn_events_location"][0];
				echo $evloc;
				break;
            case "sn_col_ev_desc";
                the_excerpt();
            break;

        }
}

// 4. Show Meta-Box

add_action( 'admin_init', 'sn_events_create' );

function sn_events_create() {
    add_meta_box('sn_events_meta', 'Event Details', 'sn_events_meta', 'sn-events', 'normal', 'default');
    add_meta_box('sn_events_images', 'Event Images', 'sn_events_images', 'sn-events', 'normal', 'default');
	wp_enqueue_style('ui-datepicker', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/smoothness/jquery-ui.css');
	wp_enqueue_script('jquery-ui', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/jquery-ui.min.js', array('jquery'));
	wp_enqueue_script('ui-datepicker', 'http://www.kelvinluck.com/assets/jquery/datePicker/v2/demo/scripts/jquery.datePicker.js');
	wp_enqueue_script('custom_script', get_bloginfo('template_url').'/assets/js/admin/events-custom.js', array('jquery'));
}


function drfw_postID_by_url($url) {
	global $wpdb;
	$id = $wpdb->get_var($wpdb->prepare("SELECT wposts.ID FROM $wpdb->posts wposts, $wpdb->postmeta wpostmeta WHERE wposts.ID =	 
	wpostmeta.post_id AND wpostmeta.meta_key = '_wp_attached_file' AND wpostmeta.meta_value = '%s' AND wposts.post_type = 'attachment'", $url));	
	return $id;

}

function sn_events_images() { 

global $post;

// adjust values here
$id = "img1"; // this will be the name of form field. Image url(s) will be submitted in $_POST using this key. So if $id == “img1” then $_POST["img1"] will have all the image urls
$svalue = ""; // this will be initial value of the above form field. Image urls.
$multiple = true; // allow multiple files upload 
$width = null; // If you want to automatically resize all uploaded images then provide width here (in pixels)
$height = null; // If you want to automatically resize all uploaded images then provide height here (in pixels)

?>

<input type="hidden" name="<?php echo $id; ?>" id="<?php echo $id; ?>" value="<?php echo get_post_meta($post -> ID, 'sn_events_images', true); ?>" />
<!--<input type="hidden" name="hidden<?php echo $id; ?>" id="hidden<?php echo $id; ?>" value="<?php echo get_post_meta($post->ID, 'sn_events_images', true); ?>" />-->
<div class="plupload-upload-uic hide-if-no-js <?php if ($multiple): ?>plupload-upload-uic-multiple<?php endif; ?>" id="<?php echo $id; ?>plupload-upload-ui">
	<input id="<?php echo $id; ?>plupload-browse-button" type="button" value="<?php esc_attr_e('Select Files'); ?>" class="button" />
	<span class="ajaxnonceplu" id="ajaxnonceplu<?php echo wp_create_nonce($id . 'pluploadan'); ?>"></span>
	<?php if ($width && $height): ?>
	<span class="plupload-resize"></span><span class="plupload-width" id="plupload-width<?php echo $width; ?>"></span>
	<span class="plupload-height" id="plupload-height<?php echo $height; ?>"></span>
	<?php endif; ?>
	<div class="filelist"></div>
</div>
<div class="plupload-thumbs <?php if ($multiple): ?>plupload-thumbs-multiple<?php endif; ?>" id="<?php echo $id; ?>plupload-thumbs"></div>
<div class="clear"></div>

<?

}

function sn_events_meta () {

// - grab data -

global $post;
$custom = get_post_custom($post->ID);
$meta_sd = $custom["sn_events_startdate"][0];
$meta_ed = $custom["sn_events_enddate"][0];
$meta_st = $meta_sd;
$meta_et = $meta_ed;
$meta_loc = $custom["sn_events_location"][0];
// - grab wp time format -

$date_format = get_option('date_format'); // Not required in my code
$time_format = get_option('time_format');

// - populate today if empty, 00:00 for time -

if ($meta_sd == null) { $meta_sd = time(); $meta_ed = $meta_sd; $meta_st = 0; $meta_et = 0;}

// - convert to pretty formats -

$clean_sd = date("D, M d, Y", $meta_sd);
$clean_ed = date("D, M d, Y", $meta_ed);
$clean_st = date($time_format, $meta_st);
$clean_et = date($time_format, $meta_et);

// - security -

echo '<input type="hidden" name="sn-events-nonce" id="sn-events-nonce" value="' .
wp_create_nonce( 'sn-events-nonce' ) . '" />';

// - output -
?>
<div class="sn-meta">
	<ul>
		<li>
			<label>Location</label>			<textarea name="sn_events_location" class="snloc"><?php echo $meta_loc; ?></textarea>
</li>		<li>
			<label>Start Date</label>
			<input name="sn_events_startdate" class="sndate" value="<?php echo $clean_sd; ?>" />
		</li>
		<li>
			<label>Start Time</label>
			<input name="sn_events_starttime" value="<?php echo $clean_st; ?>" />
			<em>Use 24h format (7pm = 19:00)</em>
		</li>
		<li>
			<label>End Date</label>
			<input name="sn_events_enddate" class="sndate" value="<?php echo $clean_ed; ?>" />
		</li>
		<li>
			<label>End Time</label>
			<input name="sn_events_endtime" value="<?php echo $clean_et; ?>" />
			<em>Use 24h format (7pm = 19:00)</em>
		</li>
	</ul>
</div>
<?php
}

// 5. Save Data

add_action ('save_post', 'save_sn_events');

function save_sn_events(){

global $post;

// - still require nonce

if ( !wp_verify_nonce( $_POST['sn-events-nonce'], 'sn-events-nonce' )) {
return $post->ID;
}

if ( !current_user_can( 'edit_post', $post->ID ))
return $post->ID;

// - convert back to unix & update post

if(!isset($_POST["sn_events_startdate"])):
return $post;
endif;
$updatestartd = strtotime ( $_POST["sn_events_startdate"] . $_POST["sn_events_starttime"] );
update_post_meta($post->ID, "sn_events_startdate", $updatestartd );

if(!isset($_POST["sn_events_enddate"])):
return $post;
endif;
$updateendd = strtotime ( $_POST["sn_events_enddate"] . $_POST["sn_events_endtime"]);
update_post_meta($post->ID, "sn_events_enddate", $updateendd );

if(!isset($_POST["sn_events_location"])):
return $post;
endif;
update_post_meta($post->ID, 'sn_events_location', $_POST['sn_events_location']);

update_post_meta($post->ID, 'sn_events_images', trim($_POST['img1']));

$imageArray = explode(",", trim($_POST['img1']));

$imageArray2 = array();

foreach ($imageArray as $item) {

$output = parse_url($item);
parse_str($output['query'], $output2);

array_push($imageArray2, $output2['id']);

}

$attachmentIds = implode(",", $imageArray2);
update_post_meta($post->ID, 'sn_events_images2', $attachmentIds);

}

// 6. Customize Update Messages

add_filter('post_updated_messages', 'events_updated_messages');

function events_updated_messages( $messages ) {

global $post, $post_ID;

$messages['sn-events'] = array(
0 => '', // Unused. Messages start at index 1.
1 => sprintf( __('Event updated. <a href="%s">View item</a>'), esc_url( get_permalink($post_ID) ) ),
2 => __('Custom field updated.'),
3 => __('Custom field deleted.'),
4 => __('Event updated.'),
/* translators: %s: date and time of the revision */
5 => isset($_GET['revision']) ? sprintf( __('Event restored to revision from %s'), wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,
6 => sprintf( __('Event published. <a href="%s">View event</a>'), esc_url( get_permalink($post_ID) ) ),
7 => __('Event saved.'),
8 => sprintf( __('Event submitted. <a target="_blank" href="%s">Preview event</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
9 => sprintf( __('Event scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview event</a>'),
// translators: Publish box date format, see http://php.net/date
date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink($post_ID) ) ),
10 => sprintf( __('Event draft updated. <a target="_blank" href="%s">Preview event</a>'), esc_url( add_query_arg( 'preview', 'true', get_permalink($post_ID) ) ) ),
);

return $messages;
}
?>
